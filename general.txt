python = ingresamos al modo interactivo en la terminal
help() = ingresamos a la ayuda de python
ctrl+c = salimos del modo python en la consola

python --version     = nos dice que version de python tenemos instalada
pip --version        = nos dice que version de pip tenemos instalada
python -m pip install --upgrade pip = actualiza pip package manager
pip list = nos muestra una lista de los packages instalados
pip install [name of package] = es la forma de instalar un package
pip install --upgrade numpy = upgrade of a package

license() = nos muestra informacion de la licencia python
help([nombre funcion])= nos da informacion sobre alguna funcion
help([nombre library].[nombre metodo]) = mas info

--------------------------------------------------------------------------
-----------------------------CPython--------------------------------------
---esto nos muestra el codigo que interpretara python-----------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------

import ast, inspect, pprint

pprint.pprint(
    ast.dump(
        ast.parse(
            inspect.getsource(nombre de funcion)
        )
    )
)

-------este es python disassembler--------

import dis
dis.dis(nombre de funcion)

----------con esto vemos el arbol de datos--------------

tree = ast.parse(inspect.getsource(nombre de funcion))
print(tree)
print(tree.body[0])
print(tree.body[0].body)

-------------__code__-----------------------
print(nombre de funcion.__code__)
print(nombre de funcion.__code__.co_consts)
print(nombre de funcion.__code__.co_varnames)
print(nombre de funcion.__code__.co_code)

-----------dis.opname-------------------
----nos muestra bytecode instructions----
-----lo usamos en index de dos en dos [0] , [2], [4] , etc---

print(dis.opname[nombre de funcion.__code__.co_code[0]])
print(dis.opname[nombre de funcion.__code__.co_code[2]])
print(dis.opname[nombre de funcion.__code__.co_code[4]])
print(dis.opname[nombre de funcion.__code__.co_code[6]])